{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1c93f007-e506-49ad-8ad0-820821eaca34",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter as tk\n",
    "from tkinter import messagebox, Toplevel, Listbox, Scrollbar\n",
    "import mysql.connector\n",
    "\n",
    "# Database connection\n",
    "conn = mysql.connector.connect(\n",
    "    host=\"localhost\",\n",
    "    user=\"root\",\n",
    "    password=\"12345\",\n",
    "    database=\"christ_junior_college\"\n",
    ")\n",
    "cursor = conn.cursor()\n",
    "\n",
    "# Function to add student to database\n",
    "def add_student():\n",
    "    name = entry_name.get()\n",
    "    reg_no = entry_reg_no.get()\n",
    "    dob = entry_dob.get()\n",
    "    stream = entry_stream.get()\n",
    "    combination = entry_combination.get()\n",
    "\n",
    "    if name and reg_no and dob and stream and combination:\n",
    "        cursor.execute(\"INSERT INTO students (name, register_no, dob, stream, combination) VALUES (%s, %s, %s, %s, %s)\", \n",
    "                       (name, reg_no, dob, stream, combination))\n",
    "        conn.commit()\n",
    "        messagebox.showinfo(\"Success\", \"Student added successfully!\")\n",
    "        clear_entries()\n",
    "    else:\n",
    "        messagebox.showwarning(\"Warning\", \"All fields are required!\")\n",
    "\n",
    "# Function to update student information\n",
    "def update_student():\n",
    "    name = entry_name.get()\n",
    "    reg_no = entry_reg_no.get()\n",
    "    dob = entry_dob.get()\n",
    "    stream = entry_stream.get()\n",
    "    combination = entry_combination.get()\n",
    "\n",
    "    if name and reg_no and dob and stream and combination:\n",
    "        cursor.execute(\"UPDATE students SET name=%s, dob=%s, stream=%s, combination=%s WHERE register_no=%s\",\n",
    "                       (name, dob, stream, combination, reg_no))\n",
    "        conn.commit()\n",
    "        messagebox.showinfo(\"Success\", \"Student information updated successfully!\")\n",
    "        clear_entries()\n",
    "    else:\n",
    "        messagebox.showwarning(\"Warning\", \"All fields are required!\")\n",
    "\n",
    "# Function to delete student from database\n",
    "def delete_student():\n",
    "    reg_no = entry_reg_no.get()\n",
    "\n",
    "    if reg_no:\n",
    "        cursor.execute(\"DELETE FROM students WHERE register_no=%s\", (reg_no,))\n",
    "        conn.commit()\n",
    "        messagebox.showinfo(\"Success\", \"Student deleted successfully!\")\n",
    "        clear_entries()\n",
    "    else:\n",
    "        messagebox.showwarning(\"Warning\", \"Register No is required!\")\n",
    "\n",
    "# Function to view all students\n",
    "def view_students():\n",
    "    view_window = Toplevel(root)\n",
    "    view_window.title(\"View Students\")\n",
    "    view_window.configure(bg=\"#E0FFFF\")  # Lighter blue\n",
    "    view_window.geometry(\"500x300\")\n",
    "    center_window(view_window, 500, 300)\n",
    "\n",
    "    scrollbar = Scrollbar(view_window)\n",
    "    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)\n",
    "\n",
    "    listbox = Listbox(view_window, yscrollcommand=scrollbar.set, font=(\"Arial\", 12), width=60)\n",
    "    listbox.pack(padx=10, pady=10)\n",
    "\n",
    "    cursor.execute(\"SELECT * FROM students\")\n",
    "    students = cursor.fetchall()\n",
    "    \n",
    "    for student in students:\n",
    "        listbox.insert(tk.END, f\"Name: {student[1]}, Reg No: {student[2]}, DOB: {student[3]}, Stream: {student[4]}, Combination: {student[5]}\")\n",
    "\n",
    "    scrollbar.config(command=listbox.yview)\n",
    "\n",
    "# Function to clear entries\n",
    "def clear_entries():\n",
    "    entry_name.delete(0, tk.END)\n",
    "    entry_reg_no.delete(0, tk.END)\n",
    "    entry_dob.delete(0, tk.END)\n",
    "    entry_stream.delete(0, tk.END)\n",
    "    entry_combination.delete(0, tk.END)\n",
    "\n",
    "# Create main window\n",
    "root = tk.Tk()\n",
    "root.title(\"Christ Junior College Management System\")\n",
    "root.configure(bg=\"#E0FFFF\")  # Lighter blue\n",
    "\n",
    "# Function to center the window on the screen\n",
    "def center_window(window, width, height):\n",
    "    screen_width = window.winfo_screenwidth()\n",
    "    screen_height = window.winfo_screenheight()\n",
    "    x = int((screen_width / 2) - (width / 2))\n",
    "    y = int((screen_height / 2) - (height / 2))\n",
    "    window.geometry(f\"{width}x{height}+{x}+{y}\")\n",
    "\n",
    "# Set the size of the main window and center it\n",
    "root.geometry(\"600x400\")\n",
    "center_window(root, 600, 400)\n",
    "\n",
    "# Create and place widgets\n",
    "tk.Label(root, text=\"Student Name\", bg=\"#E0FFFF\", font=(\"Arial\", 12)).grid(row=0, column=0, padx=10, pady=10)\n",
    "entry_name = tk.Entry(root, font=(\"Arial\", 12), width=30)\n",
    "entry_name.grid(row=0, column=1, padx=10, pady=10)\n",
    "\n",
    "tk.Label(root, text=\"Register No\", bg=\"#E0FFFF\", font=(\"Arial\", 12)).grid(row=1, column=0, padx=10, pady=10)\n",
    "entry_reg_no = tk.Entry(root, font=(\"Arial\", 12), width=30)\n",
    "entry_reg_no.grid(row=1, column=1, padx=10, pady=10)\n",
    "\n",
    "tk.Label(root, text=\"Date of Birth (YYYY-MM-DD)\", bg=\"#E0FFFF\", font=(\"Arial\", 12)).grid(row=2, column=0, padx=10, pady=10)\n",
    "entry_dob = tk.Entry(root, font=(\"Arial\", 12), width=30)\n",
    "entry_dob.grid(row=2, column=1, padx=10, pady=10)\n",
    "\n",
    "tk.Label(root, text=\"Stream\", bg=\"#E0FFFF\", font=(\"Arial\", 12)).grid(row=3, column=0, padx=10, pady=10)\n",
    "entry_stream = tk.Entry(root, font=(\"Arial\", 12), width=30)\n",
    "entry_stream.grid(row=3, column=1, padx=10, pady=10)\n",
    "\n",
    "tk.Label(root, text=\"Combination\", bg=\"#E0FFFF\", font=(\"Arial\", 12)).grid(row=4, column=0, padx=10, pady=10)\n",
    "entry_combination = tk.Entry(root, font=(\"Arial\", 12), width=30)\n",
    "entry_combination.grid(row=4, column=1, padx=10, pady=10)\n",
    "\n",
    "# Create buttons frame\n",
    "buttons_frame = tk.Frame(root, bg=\"#E0FFFF\")\n",
    "buttons_frame.grid(row=5, column=0, columnspan=2, pady=10)\n",
    "\n",
    "tk.Button(buttons_frame, text=\"Add Student\", command=add_student, font=(\"Arial\", 12)).grid(row=0, column=0, padx=5, pady=5)\n",
    "tk.Button(buttons_frame, text=\"Update Student\", command=update_student, font=(\"Arial\", 12)).grid(row=0, column=1, padx=5, pady=5)\n",
    "tk.Button(buttons_frame, text=\"Delete Student\", command=delete_student, font=(\"Arial\", 12)).grid(row=0, column=2, padx=5, pady=5)\n",
    "tk.Button(buttons_frame, text=\"View Students\", command=view_students, font=(\"Arial\", 12)).grid(row=0, column=3, padx=5, pady=5)\n",
    "\n",
    "# Start the GUI main loop\n",
    "root.mainloop()\n",
    "\n",
    "# Close the database connection when done\n",
    "conn.close()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0bbde724-49fb-46b7-b29a-2b70b4689853",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
